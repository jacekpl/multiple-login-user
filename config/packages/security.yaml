security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        backend_admin:
            memory:
                users:
                    admin:
                        password: '%env(ADMIN_PASSWORD)%'
                        roles: 'ROLE_ADMIN'
        api_login:
            entity:
                class: 'App\Entity\User'

        all_users:
            chain:
                providers: ['api_login', 'backend_admin']
    encoders:
        Symfony\Component\Security\Core\User\User: bcrypt
        App\Entity\User: bcrypt
        App\Entity\Vendor: bcrypt

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        roomsketcher:
            pattern: ^/api/roomsketcher/assignments/notification$
            #security: false
            #anonymous: true

        cubicasa:
            pattern: ^/api/cubicasa/webhook$
            #anonymous: true

        api_login:
            pattern: ^/api/login
            #anonymous: true
            stateless: true
            provider: api_login

            json_login:
                check_path: /api/login
                username_path: email
                success_handler: App\Security\JWT\Handler\AuthenticationSuccessHandler
                failure_handler: App\Security\JWT\Handler\AuthenticationFailureHandler

        api:
            pattern:   ^/api(?!/refreshToken)(?!/doc)(?!/resetPassword)(?!/resetPasswordToken)(?!/registerUser)(?!/orders/.+/shared)
            stateless: true
            provider: api_login
            guard:
                authenticators:
                    - App\Security\JWT\Guard\JWTTokenAuthenticator
            switch_user: { role: ROLE_ALLOWED_TO_SWITCH, parameter: x-switch-user }
            
        backend_admin:
            pattern: ^/admin
            #anonymous: true
            provider: backend_admin

            form_login:
                login_path: admin_login
                check_path: admin_login
                default_target_path: admin_companies
                enable_csrf: true

            logout:
                path:   /admin/logout
                target: /admin/login

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/login$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/, roles: ROLE_ADMIN }

        # API
        - { path: ^/api/login$, roles: PUBLIC_ACCESS }
        - { path: ^/api/users, roles: ROLE_USER }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
